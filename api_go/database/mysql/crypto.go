package mysql

import (
	"api/util/log"
	"fmt"
	"golang.org/x/text/encoding/simplifiedchinese"
	"strconv"
	"strings"
)

var (
	enKey = [256]uint8{0,194,245,180,100,234,221,88,16,102,119,113,207,91,99,248,219,191,164,72,121,1,20,41,83,243,14,27,213,21,50,13,116,156,140,81,7,237,203,126,123,153,30,61,230,76,217,8,58,24,159,117,190,193,25,215,225,67,48,18,80,11,97,242,6,195,133,141,129,148,239,31,128,137,147,250,101,79,56,49,45,209,114,69,9,82,23,35,150,124,168,51,115,139,223,144,238,171,177,212,74,197,208,105,55,210,130,66,53,75,106,236,224,122,196,52,249,176,39,146,186,157,118,231,44,107,255,46,247,162,2,163,161,78,183,232,34,179,228,57,71,205,216,93,241,43,98,86,201,32,211,198,202,47,62,252,29,167,160,95,254,90,204,152,73,178,12,103,112,235,94,172,136,131,229,151,199,134,155,169,22,59,92,214,96,189,109,233,120,200,28,192,174,54,60,142,158,111,244,70,170,222,10,40,185,38,253,64,5,143,145,63,227,181,175,149,166,246,251,15,19,110,17,3,36,127,182,87,218,42,26,68,184,165,33,4,226,173,84,65,138,240,77,37,85,187,89,108,220,132,188,104,135,154,125,206}
	deKey = [256]uint8{0,21,130,223,235,208,64,36,47,84,202,61,166,31,26,219,8,222,59,220,22,29,180,86,49,54,230,27,190,156,42,71,149,234,136,87,224,243,205,118,203,23,229,145,124,80,127,153,58,79,30,91,115,108,193,104,78,139,48,181,194,43,154,211,207,239,107,57,231,83,199,140,19,164,100,109,45,242,133,77,60,35,85,24,238,244,147,227,7,246,161,13,182,143,170,159,184,62,146,14,4,76,9,167,251,103,110,125,247,186,221,197,168,11,82,92,32,51,122,10,188,20,113,40,89,254,39,225,72,68,106,173,249,66,177,252,172,73,240,93,34,67,195,209,95,210,119,74,69,215,88,175,163,41,253,178,33,121,196,50,158,132,129,131,18,233,216,157,90,179,200,97,171,237,192,214,117,98,165,137,3,213,226,134,232,204,120,245,250,185,52,17,191,53,1,65,114,101,151,176,189,148,152,38,162,141,255,12,102,81,105,150,99,28,183,55,142,46,228,16,248,6,201,94,112,56,236,212,138,174,44,123,135,187,5,169,111,37,96,70,241,144,63,25,198,2,217,128,15,116,75,218,155,206,160,126}
)

func Encode(text string) (str string){
	byteArray := []byte(text)

	str = ""
	for _, element := range byteArray {
		hex := fmt.Sprintf("%.2X", enKey[element])
		str +="/!"+hex
	}

	return str
}

func Dncode(text string) (str string){
	text = strings.Replace(text, "/!", "", -1)
	strLen := len(text) / 2
	str = ""
	var byte []byte
	for i:=0; i < strLen; i++ {
		hex := text[(i*2) : ((i+1) * 2)]
		n, err := strconv.ParseUint(hex, 16, 32)
		if err != nil {
			log.Error(err)
		}else{
			byte=append(byte,deKey[n])
		}
	}


	str=ConvertByte2String(byte,UTF8)

	return str
}


type Charset string

const (
	UTF8    = Charset("UTF-8")
	GB18030 = Charset("GB18030")
)

func ConvertByte2String(byte []byte, charset Charset) string {

	var str string
	switch charset {
	case GB18030:
		var decodeBytes,_=simplifiedchinese.GB18030.NewDecoder().Bytes(byte)
		str= string(decodeBytes)
	case UTF8:
		fallthrough
	default:
		str = string(byte)
	}

	return str
}